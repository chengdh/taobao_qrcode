require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe LogosController do
  render_views
  let_valid_session

  let!(:valid_attributes) { {:img => FactoryGirl.build(:logo).img}}

  describe "GET index" do
    it "assigns all logos as @logos" do
      logo = FactoryGirl.create(:logo)
      get :index, {:format => :json},valid_session
      assigns(:logos).should eq([logo])
    end
  end

  describe "GET show" do
    it "assigns the requested logo as @logo" do
      logo = FactoryGirl.create(:logo)
      get :show, {:id => logo.to_param}, valid_session
      assigns(:logo).should eq(logo)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Logo" do
        expect {
          post :create, {:logo => valid_attributes,:format => :json}, valid_session
        }.to change(Logo, :count).by(1)
      end

      it "assigns a newly created logo as @logo" do
        post :create, {:logo =>  valid_attributes,:format => :json}, valid_session
        assigns(:logo).should be_a(Logo)
        assigns(:logo).should be_persisted
      end

    end
  end

  describe "DELETE destroy" do
    it "destroys the requested logo" do
      logo = FactoryGirl.create(:logo)
      expect {
        delete :destroy, {:id => logo.to_param}, valid_session
      }.to change(Logo, :count).by(-1)
    end

    it "redirects to the logos list" do
      logo = FactoryGirl.create(:logo)
      delete :destroy, {:id => logo.to_param}, valid_session
      response.should redirect_to(logos_url)
    end
  end
end
